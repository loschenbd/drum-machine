{"version":3,"sources":["app/components/DrumPad.js","app/App.js","serviceWorker.js","index.js"],"names":["DrumPad","props","handleKeyDown","e","keyCode","audio","current","play","handleDisplay","id","currentTime","handleClick","console","log","React","createRef","document","addEventListener","this","removeEventListener","onClick","className","letterKey","ref","src","path","Component","soundData","App","display","setState","state","map","data","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"4OAkDeA,G,wDAvCb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAINC,cAAgB,SAAAC,GACZA,EAAEC,UAAY,EAAKH,MAAMG,UAC3B,EAAKC,MAAMC,QAAQC,OACnB,EAAKN,MAAMO,cAAc,EAAKP,MAAMQ,IACpC,EAAKJ,MAAMC,QAAQI,YAAc,IATlB,EAanBC,YAAc,WACZ,EAAKN,MAAMC,QAAQC,OACnBK,QAAQC,IAAI,EAAKR,MAAMC,SACvB,EAAKL,MAAMO,cAAc,EAAKP,MAAMQ,IACpC,EAAKJ,MAAMC,QAAQI,YAAc,GAfjC,EAAKL,MAAQS,IAAMC,YAFF,E,gEANjBC,SAASC,iBAAiB,UAAWC,KAAKhB,iB,6CAG1Cc,SAASG,oBAAoB,UAAWD,KAAKhB,mB,8CAuB7C,OACE,4BACEkB,QAASF,KAAKP,YACdU,UAAU,WACVZ,GAAIS,KAAKjB,MAAMQ,GACfL,QAASc,KAAKjB,MAAMG,SAEpB,4BAAKc,KAAKjB,MAAMqB,WAChB,2BACEC,IAAKL,KAAKb,MACVgB,UAAU,OACVZ,GAAIS,KAAKjB,MAAMqB,UACfE,IAAKN,KAAKjB,MAAMwB,Y,GAxCJX,IAAMY,YCItBC,EAAY,CAAC,CACjBvB,QAAS,GACTkB,UAAW,IACXb,GAAI,WACJgB,KAAM,0BACL,CACDrB,QAAS,GACTkB,UAAW,IACXb,GAAI,WACJgB,KAAM,0BACL,CACDrB,QAAS,GACTkB,UAAW,IACXb,GAAI,WACJgB,KAAM,0BACL,CACDrB,QAAS,GACTkB,UAAW,IACXb,GAAI,WACJgB,KAAM,4BACL,CACDrB,QAAS,GACTkB,UAAW,IACXb,GAAI,OACJgB,KAAM,0BACL,CACDrB,QAAS,GACTkB,UAAW,IACXb,GAAI,UACJgB,KAAM,wBACL,CACDrB,QAAS,GACTkB,UAAW,IACXb,GAAI,cACJgB,KAAM,4BACL,CACDrB,QAAS,GACTkB,UAAW,IACXb,GAAI,OACJgB,KAAM,4BACL,CACDrB,QAAS,GACTkB,UAAW,IACXb,GAAI,YACJgB,KAAM,yBAmCOG,E,kDA5Bb,WAAY3B,GAAQ,IAAD,8BACjB,cAAMA,IAMRO,cAAgB,SAAAqB,GAAO,OAAI,EAAKC,SAAS,CAAED,aALzC,EAAKE,MAAQ,CACXF,QAAU,eAHK,E,qDAST,IAAD,OACT,OACE,yBAAKpB,GAAG,eAAeY,UAAU,OAC/B,yBAAKZ,GAAG,WAAWS,KAAKa,MAAMF,SAC9B,yBAAKR,UAAU,aACdM,EAAUK,KAAK,SAAAC,GAAI,OAClB,kBAAC,EAAD,CACExB,GAAIwB,EAAKxB,GACTa,UAAWW,EAAKX,UAChBG,KAAMQ,EAAKR,KACXrB,QAAS6B,EAAK7B,QACdI,cAAe,EAAKA,yB,GArBZM,IAAMY,WC7CJQ,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFzB,SAAS0B,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLtC,QAAQsC,MAAMA,EAAMC,a","file":"static/js/main.369ce971.chunk.js","sourcesContent":["import React from 'react';\n\n\nclass DrumPad extends React.Component {\n  componentDidMount() {\n    document.addEventListener('keydown', this.handleKeyDown)\n  }\n  componentWillUnmount() {\n    document.removeEventListener('keydown', this.handleKeyDown)\n  }\n\n  constructor(props) {\n    super(props);\n    this.audio = React.createRef();\n  }\n\n    handleKeyDown = e => {\n    if (e.keyCode === this.props.keyCode) {\n      this.audio.current.play();\n      this.props.handleDisplay(this.props.id);\n      this.audio.current.currentTime = 0;\n\n    }\n    };\n  handleClick = () => {\n    this.audio.current.play();\n    console.log(this.audio.current);\n    this.props.handleDisplay(this.props.id)\n    this.audio.current.currentTime = 0;\n  };\n  render() {\n    return (\n      <button\n        onClick={this.handleClick}\n        className=\"drum-pad\"\n        id={this.props.id}\n        keyCode={this.props.keyCode}\n      >\n        <h3>{this.props.letterKey}</h3>\n        <audio\n          ref={this.audio}\n          className=\"clip\"\n          id={this.props.letterKey}\n          src={this.props.path}>\n        </audio>\n      </button>\n    )\n  }\n}\n\nexport default DrumPad","import React from 'react';\nimport './App.css';\nimport DrumPad from \"./components/DrumPad\"\n\n// mp3s must be served on localhost:8000\n//You can do this bu running `python -m SimpleHTTPServer` inside the project directory\n\nconst soundData = [{\n  keyCode: 81,\n  letterKey: 'Q',\n  id: 'Heater-1',\n  path: 'src/audio/Heater-1.mp3'\n}, {\n  keyCode: 87,\n  letterKey: 'W',\n  id: 'Heater-2',\n  path: 'src/audio/Heater-2.mp3'\n}, {\n  keyCode: 69,\n  letterKey: 'E',\n  id: 'Heater-3',\n  path: 'src/audio/Heater-3.mp3'\n}, {\n  keyCode: 65,\n  letterKey: 'A',\n  id: 'Heater-4',\n  path: 'src/audio/Heater-4_1.mp3'\n}, {\n  keyCode: 83,\n  letterKey: 'S',\n  id: 'Clap',\n  path: 'src/audio/Heater-6.mp3'\n}, {\n  keyCode: 68,\n  letterKey: 'D',\n  id: 'Open-HH',\n  path: 'src/audio/Dsc_Oh.mp3'\n}, {\n  keyCode: 90,\n  letterKey: 'Z',\n  id: \"Kick-n'-Hat\",\n  path: 'src/audio/Kick_n_Hat.mp3'\n}, {\n  keyCode: 88,\n  letterKey: 'X',\n  id: 'Kick',\n  path: 'src/audio/RP4_KICK_1.mp3'\n}, {\n  keyCode: 67,\n  letterKey: 'C',\n  id: 'Closed-HH',\n  path: 'src/audio/Cev_H2.mp3'\n},\n];\n\n\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      display : 'Press a key'\n    }\n  }\n\n  handleDisplay = display => this.setState({ display });\n\n  render() {\n  return (\n    <div id=\"drum-machine\" className=\"App\">\n      <div id=\"display\">{this.state.display}</div>\n      <div className=\"drum-pads\">\n      {soundData.map( data => (\n        <DrumPad\n          id={data.id}\n          letterKey={data.letterKey}\n          path={data.path}\n          keyCode={data.keyCode}\n          handleDisplay={this.handleDisplay}\n        />\n      ))}\n      </div>\n    </div>\n  );\n}}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './app/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}